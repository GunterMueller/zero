#ifndef XCT_LOGGER_H
#define XCT_LOGGER_H

#include "btree_page_h.h"
#include "logdef_gen.h"

class XctLogger
{
public:

    /*
     * This method replaces the old log "stubs" that were generated by a Perl
     * script logdef.pl. Two overloads are required because of the cumbersome
     * way in which PageLSNs are managed in Zero (see xct_t::give_logbuf).
     */
    // CS TODO we need a new page-lsn update mechanism!
    template <class Logrec, class... Args>
    static rc_t log(const Args&... args)
    {
        xct_t* xd = smthread_t::xct();
        bool should_log = smlevel_0::log && smlevel_0::logging_enabled
                            && xd && xd->is_log_on();
        if (should_log)  {
            logrec_t* logrec;
            W_DO(xd->get_logbuf(logrec));
            new (logrec) Logrec {args...};
            W_DO(xd->give_logbuf(logrec));
        }

        return RCOK;
    }

    template <class Logrec, class... Args>
    static rc_t log(const btree_page_h& p, const Args&... args)
    {
        xct_t* xd = smthread_t::xct();
        bool should_log = smlevel_0::log && smlevel_0::logging_enabled
                            && xd && xd->is_log_on();
        if (should_log)  {
            logrec_t* logrec;
            W_DO(xd->get_logbuf(logrec));
            new (logrec) Logrec {p, args...};
            W_DO(xd->give_logbuf(logrec, &p));
        }

        return RCOK;
    }

    template <class Logrec, class... Args>
    static rc_t log(const btree_page_h& p, const btree_page_h& p2, const Args&... args)
    {
        xct_t* xd = smthread_t::xct();
        bool should_log = smlevel_0::log && smlevel_0::logging_enabled
                            && xd && xd->is_log_on();
        if (should_log)  {
            logrec_t* logrec;
            W_DO(xd->get_logbuf(logrec));
            new (logrec) Logrec {p, p2, args...};
            W_DO(xd->give_logbuf(logrec, &p, &p2));
        }

        return RCOK;
    }
};

// CS TODO this is a temporary alias -- at some point the SM should have its
// own generic Logger template argument
using Logger = XctLogger;

#endif
