# The root CMakeLists.txt
# All cmake files were initially generated by am2cmake with lots of manual edits.

# This root file specifies project-wide settings and compiler settings,
# which were placed in root Makefile.am and Makefile.generic in original ShoreMT.

cmake_minimum_required(VERSION 2.6)

PROJECT(fbtree) # Foster B-Trees

# Note, we can't change compiler based on CMAKE_SYSTEM.
# Before PROJECT(), CMAKE_SYSTEM is empty, so we have no clue.
# After PROJECT(), we can't change CMAKE_C_COMPILER.
# The only solution is the user provides "-DCMAKE_CXX_COMPILER=CC" on solaris!
IF(${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
  MESSAGE (STATUS "Wow, seems like I'm running on SunOS!")
  SET (COMPILER_IS_SUNCC true)
  SET (COMPILER_IS_GCC false)
  SET (COMPILER_IS_ICC false)
ELSE(${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
  SET (COMPILER_IS_SUNCC false)
  IF (CMAKE_COMPILER_IS_GNUCXX)
    SET (COMPILER_IS_GCC true)
    SET (COMPILER_IS_ICC false)
  ELSE (CMAKE_COMPILER_IS_GNUCXX)
    SET (COMPILER_IS_GCC false)
    SET (COMPILER_IS_ICC true)
  ENDIF (CMAKE_COMPILER_IS_GNUCXX)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "SunOS")

MESSAGE (STATUS)
MESSAGE (STATUS "========================================")
MESSAGE (STATUS "CMAKE_SYSTEM=${CMAKE_SYSTEM}")
MESSAGE (STATUS "CMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}")
MESSAGE (STATUS "CMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
MESSAGE (STATUS "CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
MESSAGE (STATUS "COMPILER_IS_SUNCC=${COMPILER_IS_SUNCC}")
MESSAGE (STATUS "COMPILER_IS_GCC=${COMPILER_IS_GCC}")
MESSAGE (STATUS "COMPILER_IS_ICC=${COMPILER_IS_ICC}")
MESSAGE (STATUS "========================================")
MESSAGE (STATUS)

#if you don't want the full compiler output, remove the following line
SET(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release CACHE STRING
      "Default=Release build. You can choose the type of build, options are: Debug Release RelWithDebInfo Trace"
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

find_package(Threads REQUIRED) # find pthread library

# libprofiler x86_64 has some issue on libunwind.
# it's so ugly and hard to fix. Just give up using libprofiler on some 
# http://code.google.com/p/google-perftools/issues/detail?id=66&can=1&q=libunwind
find_package(GooglePerftools) # google-perftools / google-perftools-devel
IF(GOOGLEPERFTOOLS_FOUND)
  SET (LINK_GOOGLEPROFILER " -lprofiler")
ELSE(GOOGLEPERFTOOLS_FOUND)
  SET (LINK_GOOGLEPROFILER " -DNO_LIBPROFILER")
ENDIF(GOOGLEPERFTOOLS_FOUND)


ENABLE_TESTING() # we use CTest all over the project. run "make test" after cmake

# compiler options. ported from Makefile.generic of original ShoreMT.
# W_DEBUG_LEVEL enables various check logics and asserts. higher is more verbose.
IF (COMPILER_IS_SUNCC)
  SET(CMAKE_CXX_FLAGS_TRACE  "-xO0 -g0 -xs -DDEBUG -DW_DEBUG_LEVEL=5 ${LINK_GOOGLEPROFILER}")
  SET(CMAKE_CXX_FLAGS_DEBUG  "-xO0 -g0 -xs -DDEBUG -DW_DEBUG_LEVEL=3 ${LINK_GOOGLEPROFILER}")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-xO2 -g0 -xs -DW_DEBUG_LEVEL=1 ${LINK_GOOGLEPROFILER}")
  SET(CMAKE_CXX_FLAGS_RELEASE "-xO4 -xinline=%auto -DNDEBUG -DW_DEBUG_LEVEL=0 ${LINK_GOOGLEPROFILER}")
ELSE (COMPILER_IS_SUNCC)
  SET(CMAKE_CXX_FLAGS_TRACE  "-O0 -g -DDEBUG -DW_DEBUG_LEVEL=5 ${LINK_GOOGLEPROFILER}")
  SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g -DDEBUG -DW_DEBUG_LEVEL=3 ${LINK_GOOGLEPROFILER}")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -DW_DEBUG_LEVEL=1 ${LINK_GOOGLEPROFILER}")
  SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -fexpensive-optimizations -finline-functions -DW_DEBUG_LEVEL=0 ${LINK_GOOGLEPROFILER}")
ENDIF (COMPILER_IS_SUNCC)

## _REENTRANT and _POSIX_PTHREAD_SEMANTICS are needed on Solaris to ensure 
# that the posix-compliant clib interfaces are there (e.g., ctime_r)
# (Actually, you're supposed to get them both with _POSIX_C_SOURCE > 199506L
# but I'm not that trusting.)

SET (MANDATORY_FLAGS "-D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS")

IF (COMPILER_IS_SUNCC)
  SET (ALWAYS_FLAGS "-features=extensions,zla -xdebugformat=stabs -DSOLARIS2 -library=stlport4  -mt -lpthread")
  #  CC turns on inlining based on optimization level.  at O0 it should
  #  do no inlining at less than O3.  There is no way to force inlining to
  #  be off (well, +d does except when the optimization level overrides it); 
  #  but you can force it to be on.
  SET (NO_INLINE_FLAGS "+d")
  SET (YES_INLINE_FLAGS "")
ELSE (COMPILER_IS_SUNCC)
  IF (COMPILER_IS_GCC)
    IF (COMPILER_IS_ICC)
      SET (ALWAYS_FLAGS "-Wall -Woverloaded-virtual -Wno-deprecated -fno-strict-aliasing -Wpointer-arith -Wwrite-strings -Werror-all -pthread -Wno-unknown-pragmas -Wcheck -wd981 -wd444 -wd383 1599 -wd1418 -wd1419 -wd1572 -wd181 -wd2259 -wd128")
      ## intel compiler "remarks"
      # 981 : operands are evaluated in unspecified order -- so what? OK
      # 444 : destructor for base class is not virtual: we have a lot of these
      # for base classes that have only static or const/enum members: smlevel*,
      # X_base_t, etc.  OK.
      # 383 : value copied to a temp, ref to temp used. OK 
      # 1599: declaration hides variable X (declared at line Z) ... OK
      # These are unavoidable due to the use of the W_DO and similar idioms.
      # 193 : zero used for undefined preprocessing variable  - fix
      # 1418: external function def with no prior decl
      #  and
      # 1419: external declaration in primary source file
      # used to generate un-mangled names for calling in debugger. OK.
      # 1572: floating point equality and inequality comparisons are unreliable 
      # in btree code; OK.
      # 181 : argument is incompat with corresponding format : in
      # debugger-callable routines  : fix
      # 2259: non-pointer converssion from X to Y may lose sig bits : TODO: track
      # these down
      # 128 : not reachable (CC complains about not returning values, icc complains
      # about not reachable)
    ELSE (COMPILER_IS_ICC)
      # -pedantic requires -Wno-long-long
      # 
      SET (ALWAYS_FLAGS "-Wextra -Woverloaded-virtual -Wno-deprecated -Wall -fno-strict-aliasing -Wpointer-arith -Wwrite-strings -Wno-long-long -pthread -Wno-deprecated") # for now, allow warning. add back -Werror later
      # NO_INLINE_FLAGS =  -fno-inline
      SET (NO_INLINE_FLAGS "")
      SET (YES_INLINE_FLAGS "-finline-functions")
    ENDIF (COMPILER_IS_ICC)
  ELSE (COMPILER_IS_GCC)
    message ( STATUS "UNKNOWN COMPILER!")
  ENDIF (COMPILER_IS_GCC)
ENDIF (COMPILER_IS_SUNCC)

SET (ENABLE_ARCH_LP64 true)  # TODO : should port from configure.ac

IF (ENABLE_ARCH_LP64)
  ## enabled by config option (default) 
  ## Now try to find out the compiler arguments needed
  IF (COMPILER_IS_SUNCC)
    ## SUN CC/64
    ## getconf doesn't necessarily keep up with the times...
    ## and in any case, it might target generic
    SET(TARGET_FLAGS "-m64 -DARCH_LP64")
    ## Assembler flags... for atomic_ops
    SET(AM_LDFLAGS "-m64")
    SET(TUNE_FLAGS "-xtarget=native")
  ELSE (COMPILER_IS_SUNCC)
    IF (COMPILER_IS_ICC)
      ## ICC/64
      SET(TUNE_FLAGS "")
    ELSE (COMPILER_IS_ICC)
      ## GCC/64
      SET(TUNE_FLAGS "-mtune=nocona")
    ENDIF (COMPILER_IS_ICC)
    # TUNE_FLAGS = -mtune=generic
    SET(TARGET_FLAGS "-m64 -DARCH_LP64")
    ## Assembler flags... for atomic_ops
    SET(AM_LDFLAGS "-m64")
  ENDIF (COMPILER_IS_SUNCC)
  SET(LARGEFILE_FLAG "")
ELSE (ENABLE_ARCH_LP64)
  IF (COMPILER_IS_SUNCC)
    # SUN CC/32
    SET(TARGET_FLAGS "-m32 -UARCH_LP64")
    SET(TUNE_FLAGS "-xtarget=native")
  ELSE (COMPILER_IS_SUNCC)
    # GCC/32
    SET(TARGET_FLAGS "-m32 -UARCH_LP64")
    SET(TUNE_FLAGS "-mtune=generic")
  ENDIF (COMPILER_IS_SUNCC)
  SET(LARGEFILE_FLAG "-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64")
  SET(AM_LDFLAGS "-m32")
ENDIF (ENABLE_ARCH_LP64)

IF (COMPILER_IS_GCC)
  ## TODO: pedantic for SUNCC?
  IF (NOPEDANTIC)
    SET(PEDANTIC "")
  ELSE (NOPEDANTIC)
    # SET(PEDANTIC "-pedantic-errors")
    # SET(PEDANTIC "-pedantic") # let me do this for now please...
  ENDIF (NOPEDANTIC)
ENDIF (COMPILER_IS_GCC)

SET(ALL_FLAGS "${PEDANTIC} ${TUNE_FLAGS} ${DEBUGFLAGS} ${W_WARNINGS} ${OPTFLAGS} ${MANDATORY_FLAGS} ${ALWAYS_FLAGS} ${TARGET_FLAGS} ${TEMPLATEFLAGS} ${LARGEFILE_FLAG}")
IF (COMPILER_IS_SUNCC)
  SET(ALL_FLAGS "${ALL_FLAGS} -lnsl") # on solaris, gethostbyname needs -lnsl
  # linker ignores ADD_DEFINITIONS, and it causes a linker problem on solaris.
  # so, let's add them as individual flags.
  SET(CMAKE_CXX_FLAGS_TRACE  "${CMAKE_CXX_FLAGS_TRACE} ${ALL_FLAGS}")
  SET(CMAKE_CXX_FLAGS_DEBUG  "${CMAKE_CXX_FLAGS_DEBUG} ${ALL_FLAGS}")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${ALL_FLAGS}")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${ALL_FLAGS}")
ELSE (COMPILER_IS_SUNCC)
  ADD_DEFINITIONS(${ALL_FLAGS})
ENDIF (COMPILER_IS_SUNCC)


## end of compiler options


add_subdirectory(src) # main source codes
add_subdirectory(config) # to be eliminated
add_subdirectory(gtest-1.6.0) # google-test library
add_subdirectory(tests) # unit testcases
#IF(GOOGLEPERFTOOLS_FOUND) #experiments folder is compiled only when libprofiler is available
    add_subdirectory(experiments) # benchmarks and other performance tests
#ENDIF(GOOGLEPERFTOOLS_FOUND)
add_subdirectory(examples) # examples to show how to use Foster B-tree. enabled only while demonstration or learning

# not needed so far, and causes a warning
# add_library(shore)
# target_link_libraries(shore fc sthread common sm atomic_ops)


